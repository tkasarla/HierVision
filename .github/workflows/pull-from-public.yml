name: Pull from public to private

on:
  schedule:
    - cron: "*/15 * * * *"  # Check every 15 minutes for new PRs
  workflow_dispatch: {}

jobs:
  pull_from_public:
    # Prevent running if triggered by sync-bot to avoid loops
    if: github.actor != 'sync-bot' && github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout private
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          lfs: false

      - name: Fetch public repo
        run: |
          set -euo pipefail
          git remote add public https://github.com/tkasarla/HierVision.git || true
          git remote set-url public https://github.com/tkasarla/HierVision.git
          echo "Fetching from public repository..."
          git fetch public main

      - name: Check if update needed
        id: check
        run: |
          set -euo pipefail
          PRIV_SHA=$(git rev-parse main)
          PUB_SHA=$(git rev-parse public/main)
          
          echo "Private SHA: $PRIV_SHA"
          echo "Public SHA:  $PUB_SHA"
          
          if [ "$PRIV_SHA" = "$PUB_SHA" ]; then
            echo "✅ Already up to date"
            echo "needs_update=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Check if public has new commits (from merged PRs)
          if git merge-base --is-ancestor "$PRIV_SHA" "$PUB_SHA" 2>/dev/null; then
            echo "📥 Public has new commits - will pull (likely from merged PR)"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          else
            # Check if this is just the workflow removal commit
            PUB_PARENT=$(git rev-parse public/main^ 2>/dev/null || echo "")
            if [ "$PUB_PARENT" = "$PRIV_SHA" ]; then
              CHANGED=$(git diff --name-only "$PRIV_SHA" "$PUB_SHA" || echo "")
              if [ -n "$CHANGED" ] && echo "$CHANGED" | grep -q "^\.github/workflows/" && \
                 ! echo "$CHANGED" | grep -qv "^\.github/workflows/"; then
                echo "ℹ️ Public is one commit ahead with only workflow removal - ignoring"
                echo "needs_update=false" >> $GITHUB_OUTPUT
                exit 0
              fi
            fi
            echo "⚠️ Histories may have diverged"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          fi

      - name: Merge from public
        if: steps.check.outputs.needs_update == 'true'
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          PRIV_SHA=$(git rev-parse main)
          PUB_SHA=$(git rev-parse public/main)
          
          # Try to merge public into private
          if git merge-base --is-ancestor "$PRIV_SHA" "$PUB_SHA" 2>/dev/null; then
            # Private is behind public - fast forward
            echo "Fast-forwarding private to public (PR was merged in public)"
            git merge --ff-only "$PUB_SHA"
            # Add marker to commit message to prevent sync-to-public from running
            git commit --amend -m "$(git log -1 --pretty=%B) [sync-from-public]" || true
            git push origin main
            echo "✅ Successfully pulled changes from public (merged PR)"
          else
            # Try regular merge (this handles when public has new commits from PRs)
            echo "Attempting to merge public changes into private..."
            if git merge "$PUB_SHA" -m "Merge changes from public repository [sync-from-public]" --no-edit; then
              git push origin main
              echo "✅ Successfully merged changes from public"
            else
              echo "❌ ERROR: Merge conflict detected"
              echo "  Private: $PRIV_SHA"
              echo "  Public:  $PUB_SHA"
              echo "Manual resolution required"
              git merge --abort
              exit 1
            fi
          fi

      - name: Push tags from public
        if: steps.check.outputs.needs_update == 'true'
        run: |
          set +e  # Don't fail if no tags exist
          echo "Syncing tags from public..."
          git fetch public 'refs/tags/v*:refs/tags/v*' --force 2>/dev/null || echo "No v* tags found"
          git fetch public 'refs/tags/release/*:refs/tags/release/*' --force 2>/dev/null || echo "No release/* tags found"
          git push origin 'refs/tags/v*:refs/tags/v*' --force 2>/dev/null || echo "No v* tags to push"
          git push origin 'refs/tags/release/*:refs/tags/release/*' --force 2>/dev/null || echo "No release/* tags to push"
          echo "✅ Tags synced"
