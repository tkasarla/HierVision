name: Sync private to public

on:
  push:
    branches: [ main ]
    paths-ignore:
      - '.github/workflows/**'
      - 'README.md'
      - 'CONTRIBUTING.md'
  workflow_dispatch:
    inputs:
      force:
        description: "Force push to public"
        required: false
        default: "false"

jobs:
  sync_to_public:
    # Don't run if this push came from pull-from-public workflow
    if: github.actor != 'github-actions[bot]' && !contains(github.event.head_commit.message, '[sync-from-public]')
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          lfs: false

      - name: Configure SSH
        run: |
          set -euo pipefail
          install -m 700 -d ~/.ssh
          printf '%s' "${{ secrets.PUBLIC_DEPLOY_KEY_B64 }}" | base64 --decode > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan github.com >> ~/.ssh/known_hosts
          
          # Verify SSH works
          if ! ssh -T git@github.com 2>&1 | grep -q "successfully authenticated"; then
            echo "ERROR: SSH authentication failed"
            exit 1
          fi
          echo "SSH authentication successful"

      - name: Configure Git
        run: |
          set -euo pipefail
          git config user.name "sync-bot"
          git config user.email "sync-bot@users.noreply.github.com"

      - name: Setup remote and create branch without workflows
        run: |
          set -euo pipefail
          git remote add public git@github.com:tkasarla/HierVision.git || true
          git remote set-url public git@github.com:tkasarla/HierVision.git
          git fetch public main || echo "Public main doesn't exist yet"
          
          git checkout -b temp-public-sync
          
          if [ -d .github/workflows ]; then
            echo "Removing .github/workflows directory"
            git rm -rf .github/workflows
            if ! git diff --cached --quiet; then
              git commit -m "Remove workflows for public" || true
            else
              echo "No workflow files to remove"
            fi
          else
            echo "No .github/workflows directory found"
          fi

      - name: Push to public
        env:
          FORCE: ${{ github.event.inputs.force }}
        run: |
          set -euo pipefail
          
          if [ "${FORCE}" = "true" ]; then
            echo "⚠️ Force pushing to public (will overwrite history)"
            git push public temp-public-sync:main --force
            echo "✅ Force push completed"
          else
            REMOTE_SHA=$(git rev-parse public/main 2>/dev/null || echo "")
            LOCAL_SHA=$(git rev-parse temp-public-sync)
            
            if [ -z "$REMOTE_SHA" ]; then
              echo "Creating public main (first push)"
              git push public temp-public-sync:main
              echo "✅ Public repository initialized"
            elif [ "$REMOTE_SHA" = "$LOCAL_SHA" ]; then
              echo "✅ Public is already up to date"
            elif git merge-base --is-ancestor public/main temp-public-sync 2>/dev/null; then
              echo "Fast-forwarding public to match private"
              git push public temp-public-sync:main
              echo "✅ Successfully synced to public"
            else
              echo "❌ ERROR: Histories diverged. Public has changes not in private."
              echo "  Private SHA: $LOCAL_SHA"
              echo "  Public SHA:  $REMOTE_SHA"
              echo "  Run 'Pull from public' first, or manually trigger with force=true"
              exit 1
            fi
          fi

      - name: Cleanup
        if: always()
        run: |
          set +e  # Don't fail on cleanup errors
          git checkout main 2>/dev/null || true
          git branch -D temp-public-sync 2>/dev/null || true
          echo "Cleanup completed"

      - name: Push tags
        run: |
          set -euo pipefail
          mapfile -t TAGS < <(git tag -l 'v*' 'release/*' | sort -u)
          if [ "${#TAGS[@]}" -eq 0 ]; then
            echo "No release tags to push"
          else
            echo "Pushing ${#TAGS[@]} release tag(s)"
            for t in "${TAGS[@]}"; do
              echo "  Pushing tag: $t"
              git push public "refs/tags/${t}:refs/tags/${t}" --force || echo "  Failed to push $t"
            done
            echo "✅ Tags synced"
          fi
