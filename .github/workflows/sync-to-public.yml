name: Sync private main -> public main (non-force, release tags, FORCE override)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      force:
        description: "One-time: force private/main -> public/main (OVERWRITES public)"
        required: false
        default: "false"

jobs:
  sync_to_public:
    if: github.actor != 'github-actions[bot]'
    runs-on: ubuntu-latest
    steps:
      # ... your existing steps ...
      # checkout (lfs: true), hydrate LFS, configure SSH w/ PUBLIC_DEPLOY_KEY, set identity

      - name: Conditional push main (prefer non-force; allow manual FORCE)
        env:
          FORCE: ${{ github.event.inputs.force }}
        run: |
          set -euo pipefail
          REMOTE="publish"
          SRC="main"
          DST="main"

          git remote add "$REMOTE" "git@github.com:tkasarla/HierVision.git" || true

          if [ "${FORCE:-false}" = "true" ]; then
            echo "::warning::FORCING private/main -> public/main (will overwrite public history)"
            # Upload LFS first (optional)
            git lfs push "$REMOTE" --all || true
            # Force branch update
            git push "$REMOTE" "refs/heads/$SRC:refs/heads/$DST" --force
          else
            echo "Attempting non-force fast-forward"
            git fetch "$REMOTE" "$DST" || true
            SRC_SHA=$(git rev-parse "$SRC")
            DST_SHA=$(git rev-parse FETCH_HEAD 2>/dev/null || echo "")
            if [ -z "$DST_SHA" ]; then
              git push "$REMOTE" "refs/heads/$SRC:refs/heads/$DST"
            else
              BASE=$(git merge-base "$SRC_SHA" "$DST_SHA")
              if [ "$BASE" = "$DST_SHA" ]; then
                git push "$REMOTE" "refs/heads/$SRC:refs/heads/$DST"
              else
                echo "::warning::Public/main diverged; not forcing (by policy)."
                echo "Run this workflow manually with input force=true to overwrite public."
                exit 1
              fi
            fi
          fi

      - name: Push release tags (v* and release/*) to PUBLIC
        run: |
          set -euo pipefail
          REMOTE="publish"
          git remote add "$REMOTE" "git@github.com:tkasarla/HierVision.git" || true
          mapfile -t TAGS < <(git tag -l 'v*' 'release/*' | sort -u)
          if [ "${#TAGS[@]}" -gt 0 ]; then
            echo "Pushing ${#TAGS[@]} release tag(s) to PUBLIC:"
            printf '  - %s\n' "${TAGS[@]}"
            for t in "${TAGS[@]}"; do
              git push "$REMOTE" "refs/tags/${t}:refs/tags/${t}" --force
            done
          else
            echo "No release tags to push."
          fi